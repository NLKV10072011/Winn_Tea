import streamlit as st
import qrcode
from io import BytesIO

st.set_page_config("Tr√† S·ªØa Toca", "üçπ", layout="wide")

# Custom CSS
st.markdown("""
<style>
    .header { color: #ff4b4b; }
    .highlight { color: #ff4b4b; font-weight: bold; }
    .success-box { background-color: #dfffdf; padding: 20px; border-radius: 10px; }
    .price { color: #666; font-size: 0.9em; }
    .footer { text-align: center; padding: 20px; color: #666; }
</style>
""", unsafe_allow_html=True)

# Danh s√°ch s·∫£n ph·∫©m
milk_tea = {
    "üßâ H·ªìng Tr√† S·ªØa Kim Tuy√™n": 35000,
    "üßâ Oolong S·ªØa T√∫c T·∫Øc": 40000,
    "üßâ Tr√† S·ªØa H·ªìng K√¥ng Ph√¥ Mai T∆∞∆°i": 45000,
    "üßâ Tr√† S·ªØa H·ªìng K√¥ng": 30000
}

fruit_tea = {
    "üçã H·ªìng Tr√† Chanh M·∫≠t Ong": 30000,
    "üçì H·ªìng Tr√† Tr√¢n Ch√¢u": 35000,
    "üçë Tr√† ƒê√†o": 40000,
    "üçá Tr√† M·∫≠n Hoa H·ªìng": 45000,
    "üçí Tr√† V·∫£i L√†i": 40000,
    "üçµ Tr√† Xanh L√†i": 35000
}

topping_prices = {
    "üçë ƒê√†o L√°t (3 l√°t)": 7000,
    "üçµ Oolong Mochi": 10000,
    "üßÄ Ph√¥ Mai T∆∞∆°i": 15000,
    "üçÆ S∆∞∆°ng S√°o": 5000,
    "‚òï Th·∫°ch C√† Ph√™": 10000,
    "ü•• Th·∫°ch Coco": 10000,
    "üîπ Tr√¢n Ch√¢u ƒêen": 10000,
    "‚ö™ Tr√¢n Ch√¢u Tr·∫Øng": 10000,
    "üçà V·∫£i Tr√°i (2 tr√°i)": 15000
}

st.title("üçπ Tr√† S·ªØa Toca - ƒê·∫∑t H√†ng Online")
st.markdown("---")

tab1, tab2 = st.tabs(["üõí ƒê·∫∑t H√†ng", "üí≥ Thanh To√°n"])

with tab1:
    col1, col2 = st.columns([3, 2])
    
    with col1:
        st.subheader("1. Ch·ªçn ƒê·ªì U·ªëng")
        drink_type = st.radio(
            "Lo·∫°i ƒë·ªì u·ªëng:",
            ["Tr√† S·ªØa üßã", "Tr√† Tr√°i C√¢y üçπ"],
            horizontal=True
        )
        
        # Hi·ªÉn th·ªã ƒë·ªì u·ªëng k√®m gi√°
        if drink_type == "Tr√† S·ªØa üßã":
            drinks = list(milk_tea.items())
            display_options = [f"{name} - {price:,.0f} VNƒê" for name, price in drinks]
            selected = st.selectbox("Ch·ªçn ƒë·ªì u·ªëng:", range(len(display_options)), 
                            format_func=lambda x: display_options[x])
            drink, base_price = drinks[selected]
        else:
            drinks = list(fruit_tea.items())
            display_options = [f"{name} - {price:,.0f} VNƒê" for name, price in drinks]
            selected = st.selectbox("Ch·ªçn ƒë·ªì u·ªëng:", range(len(display_options)), 
                            format_func=lambda x: display_options[x])
            drink, base_price = drinks[selected]
        
        st.subheader("2. Tu·ª≥ Ch·ªçn")
        col_size, col_num = st.columns(2)
        with col_size:
            # Hi·ªÉn th·ªã gi√° t·ª´ng size
            size_multiplier = {"Nh·ªè": 0.9, "V·ª´a": 1.0, "L·ªõn": 1.2}
            size_prices = {size: base_price * mult for size, mult in size_multiplier.items()}
            size = st.radio(
                "Size:",
                options=list(size_multiplier.keys()),
                index=1,
                format_func=lambda x: f"{x} ({size_prices[x]:,.0f} VNƒê)"
            )
        with col_num:
            quantity = st.number_input("S·ªë l∆∞·ª£ng:", 1, 10, 1)
        
        st.subheader("3. Topping")
        # Hi·ªÉn th·ªã topping k√®m gi√°
        toppings = [
            f"{name} - {price:,.0f} VNƒê" 
            for name, price in topping_prices.items()
        ]
        selected_toppings = st.multiselect(
            "Th√™m topping (tu·ª≥ ch·ªçn):", 
            toppings
        )
        # L·ªçc t√™n topping t·ª´ l·ª±a ch·ªçn
        toppings = [t.split(" - ")[0] for t in selected_toppings]
        total_topping = sum(topping_prices[t.split(" - ")[0]] for t in selected_toppings)
        
    with col2:
        st.subheader("4. Th√¥ng Tin Giao H√†ng")
        address = st.text_input("ƒê·ªãa ch·ªâ nh·∫≠n h√†ng:")
        delivery_time = st.time_input("Th·ªùi gian giao h√†ng:")
        
        st.subheader("üìù T√≥m T·∫Øt ƒê∆°n H√†ng")
        # T√≠nh to√°n gi√°
        size_price = size_prices[size]
        total_price = (size_price + total_topping) * quantity
        
        st.markdown(f"""
        - **ƒê·ªì u·ªëng:** {drink} ({size})
        - **Topping:** {', '.join(toppings) if toppings else 'Kh√¥ng c√≥'}
        - **S·ªë l∆∞·ª£ng:** {quantity}
        - **Th√†nh ti·ªÅn:** {total_price:,.0f} VNƒê
        """)
        
        if st.button("üì• ƒê·∫∑t H√†ng", type="primary", use_container_width=True):
            if not address.strip():
                st.error("Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng!")
            else:
                st.session_state.order = {
                    "drink": drink,
                    "size": size,
                    "toppings": toppings,
                    "quantity": quantity,
                    "address": address,
                    "delivery_time": delivery_time.strftime("%H:%M"),
                    "original_total_price": total_price,
                    "total_price": total_price,
                    "discount_applied": None
                }
                st.success("ƒê·∫∑t h√†ng th√†nh c√¥ng! Vui l√≤ng chuy·ªÉn sang tab Thanh To√°n.")

with tab2:
    if "order" not in st.session_state:
        st.warning("Vui l√≤ng ƒë·∫∑t h√†ng tr∆∞·ªõc khi thanh to√°n")
    else:
        order = st.session_state.order
        st.subheader("üí≥ Ph∆∞∆°ng Th·ª©c Thanh To√°n")
        
        # Discount code section
        with st.expander("üéÅ √Åp d·ª•ng m√£ gi·∫£m gi√°"):
            discount_code = st.text_input("Nh·∫≠p m√£ gi·∫£m gi√°:")
            if st.button("√Åp d·ª•ng m√£"):
                valid_codes = {
                    "TOCA10": 0.1,
                    "FREESHIP": 20000,
                    "TEA20": 0.2
                }
                # Reset v·ªÅ gi√° g·ªëc tr∆∞·ªõc khi √°p d·ª•ng m√£ m·ªõi
                order["total_price"] = order["original_total_price"]
                order["discount_applied"] = None
                
                if discount_code in valid_codes:
                    discount = valid_codes[discount_code]
                    original_total = order["original_total_price"]
                    
                    if isinstance(discount, float):
                        new_total = original_total * (1 - discount)
                        new_total = int(round(new_total))
                    else:
                        new_total = original_total - discount
                    
                    new_total = max(new_total, 0)  # ƒê·∫£m b·∫£o kh√¥ng √¢m
                    order["total_price"] = new_total
                    order["discount_applied"] = discount_code
                    st.success(f"√Åp d·ª•ng th√†nh c√¥ng! T·ªïng c·ªông: {new_total:,.0f} VNƒê")
                else:
                    st.error("M√£ kh√¥ng h·ª£p l·ªá")
        
        st.markdown(f"""
        ### T·ªïng thanh to√°n
        **{order['total_price']:,.0f} VNƒê**
        """)
        
        payment_method = st.radio(
            "Ch·ªçn ph∆∞∆°ng th·ª©c:",
            ["Momo", "ZaloPay", "Chuy·ªÉn kho·∫£n ng√¢n h√†ng", "Ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng"]
        )
        
        if payment_method in ["Momo", "ZaloPay"]:
            # T·∫°o QR code ƒë·ªông
            qr_data = {
                "Momo": f"https://momo.vn?amount={order['total_price']}",
                "ZaloPay": f"zalopay://payment?amount={order['total_price']}"
            }[payment_method]
            
            qr = qrcode.make(qr_data)
            img_bytes = BytesIO()
            qr.save(img_bytes, format="PNG")
            
            col_qr, col_info = st.columns([1, 3])
            with col_qr:
                st.image(img_bytes.getvalue(), caption=f"{payment_method} QR", width=200)
            with col_info:
                st.markdown(f"""
                ### H∆∞·ªõng d·∫´n:
                1. M·ªü ·ª©ng d·ª•ng {payment_method}
                2. Qu√©t m√£ QR
                3. X√°c nh·∫≠n thanh to√°n **{order['total_price']:,.0f} VNƒê**
                """)
        
        # N√∫t t·∫£i h√≥a ƒë∆°n
        receipt = f"""
        === H√ìA ƒê∆†N TOCA TEA ===
        
        M√≥n ƒë√£ ƒë·∫∑t: {order['drink']} ({order['size']})
        Topping: {', '.join(order['toppings']) if order['toppings'] else 'Kh√¥ng c√≥'}
        S·ªë l∆∞·ª£ng: {order['quantity']}
        Th·ªùi gian giao: {order['delivery_time']}
        ƒê·ªãa ch·ªâ: {order['address']}
        M√£ gi·∫£m gi√°: {order.get('discount_applied', 'Kh√¥ng c√≥')}
        ----------------------------------
        T·ªîNG C·ªòNG: {order['total_price']:,.0f} VNƒê
        """
        st.download_button("üì• T·∫£i h√≥a ƒë∆°n", receipt, file_name="Toca_Tea_Receipt.txt")
        
        if st.button("‚úÖ X√°c Nh·∫≠n Thanh To√°n", type="primary"):
            st.balloons()
            st.success("Thanh to√°n th√†nh c√¥ng! ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã...")
            del st.session_state.order

st.markdown("---")
st.markdown("""
<div class="footer">
    ¬© 2024 Tr√† S·ªØa Toca - Hotline: 1900 9999
</div>
""", unsafe_allow_html=True)